void gemm1  (float *a, float *b, float *c, int n){
        int i, j, k;
        for ( j = 0; j < n; ++j) {
                for( k = 0; k < n; k++ ) {
                    for( i = 0; i < n; ++i ) {
                        /*
                            Isto seria como aceder a matriz por coluna/linha
                        */
                        /* c[i][j] += a[i][k]*b[k][j] */
                        
                        /* 
                            As matrizes sao armazenada em memoria
                            por linhas seguidas.
                            O array c vai ser a multiplicaçao de a por b
                        */
                        
                        // Trocar o i com o j para optimizar

                        c[i*n+j] += a[i*n+k] * b[k*n+j];
                    }
                }
        }
}


// Atalhos para os diferentes exercicios

cp .c main.Q2.c       -- Copia main.c main.Q2.c

 > main.c
 > main.c main.Q2.c


mv main.c main.original.c  -- Mover main.c main.original.c

 > main.c main.Q2.c
 > main.original.c main.Q2.c

ln -s main.original.c main.Q2.c -- Original -> Q2

  > main.original.c main.Q2.c
  > (main.c -> (main.Q2.c)  main.Q2.c main.Q3.c


-- Submeter a batch
sbatch gemm.sh <tamanho da matriz> <versão(gemm_nº)>

-O2 // Código optimizado
-O0 // Não optimizado